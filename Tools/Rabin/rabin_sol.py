from Crypto.Util.number import long_to_bytes as l2b
from modular_sqrt import modular_sqrt
from string import printable

p = 416835513771282386514568836191681760971829004269725709610710626946559368006342658194525259634969297938883155195834864676790249857624739386431798157728603
q = 1979968690413591335944201971910488364616187770281197120650875477996156998030165907455238957933094804031981974077477456579642988264126768863441500694216811
c = 801050608421922967220624523903721496853411844056321773877598932155971380872263121340024512973182420871402804237809506243995703890886804092449855251892886296340338442367792297266755554172082930224889412735287102163161928535579728998850091020972410977027707699268899998522781790134147981974412918582618345868

n = p * q


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


def check(m):
    return all(ch in printable for ch in l2b(m))


def dec(t):
    mp = modular_sqrt(t, p)
    mq = modular_sqrt(t, q)
    _, yp, yq = egcd(p, q)
    r = (yp * p * mq + yq * q * mp) % n
    s = (yp * p * mq - yq * q * mp) % n
    ms = [r, s, n - r, n - s]
    for m in ms:
        if check(m):
            flag = l2b(m)
            print(flag)
            raw_input()
            exit()
    for m in ms:
        dec(m)

dec(c)

